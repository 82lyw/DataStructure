template <typename ElemType>
void displayCurrentObject(MySqStack<ElemType> rec)
{
	cout << endl;
	/*cout << rec;*/
}

template <typename ElemType>
void ex4_1_1(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************在栈顶压入元素*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}

template <typename ElemType>
void ex4_1_2(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************弹出栈顶的元素到e*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}

template <typename ElemType>
void ex4_1_3(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************读栈顶的元素*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}

template <typename ElemType>
void ex4_1_4(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************判断顺序栈是否为空*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}

template <typename ElemType>
void ex4_1_5(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************求顺序栈中元素的个数*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}

template <typename ElemType>
void ex4_1_6(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************把一个顺序栈赋值给另一个顺序栈*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}

template <typename ElemType>
void ex4_1_7(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************把顺序栈置空*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}

template <typename ElemType>
void ex4_1_8(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************随机生成顺序栈*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}

template <typename ElemType>
void ex4_1_9(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************用已有的顺序栈初始化另一个新的顺序栈*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}

template <typename ElemType>
void ex4_1_10(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************表达式求解*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}

template <typename ElemType>
void ex4_1_11(MySqStack<ElemType> & rec, char & continueYesNo)
{
	cout << "*********************迷宫求解*************************" << endl << endl;




	cout << "***********************************************************" << endl << endl;
	cout << "还继续吗（Y.继续\tN.结束）？";
	cin >> continueYesNo;
}


